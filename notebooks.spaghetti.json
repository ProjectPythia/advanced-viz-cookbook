{"version":2,"kind":"Notebook","sha256":"3000cf25dbf0980c34603dcbb9332217be175584257d4700b6ebee4f4980191a","slug":"notebooks.spaghetti","location":"/notebooks/6-spaghetti.ipynb","dependencies":[],"frontmatter":{"title":"Spaghetti Plots","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"The Project Pythia Community","given":"The Project Pythia","family":"Community"},"name":"The Project Pythia Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/advanced-viz-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/advanced-viz-cookbook/blob/main/notebooks/6-spaghetti.ipynb","exports":[{"format":"ipynb","filename":"6-spaghetti.ipynb","url":"/advanced-viz-cookbook/build/6-spaghetti-b8c9085cf5579f62abef82d0a6cb8c6c.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n3jxuuHDQE"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"JRA0Kj6Otk"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Spaghetti plots are a tool typically used to visualize movement. Essentially they are many line plots displayed on the same axes. By drawing the same path at different times or from different forecasts, we can see the patterns and chaos associated with the plotted variable.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"MV9Fn6ZhVf"}],"key":"LxNeaRoGoq"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Spaghetti Hurricane Plot","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"MXTc4b6IZT"}],"key":"okBohayDLE"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Spaghetti Contour Plot","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"M4IAFIWIrn"}],"key":"dNvkBARh0D"}],"key":"LcVKZ0jBPI"}],"key":"AHpnGrpIDq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"apSEDEtvgA"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"fGy9PlK6d5"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fL2yAqpZjX"}],"key":"hZlNWHS562"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"M3yBUQfP6y"}],"key":"uBiOjZeKKP"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jDEBTnBRBd"}],"key":"EuCxGm9BjW"}],"key":"lthYV18urZ"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VnEUhGn10e"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib","key":"d93aWgVabv"}],"key":"RjzbyvImBZ"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"aDpcYAIiGg"}],"key":"V3IebUaaxo"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"nVEKX6Xzgr"}],"key":"vw6PAjrUlT"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Cartopy","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EB2xvyzIKb"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy","key":"LwbisXDEPy"}],"key":"YbbGLzNPeE"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"M5iwe58lP9"}],"key":"a9izycAWBB"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"cWu3kDkxis"}],"key":"IefCk29JFY"}],"key":"BVAdDWnWkh"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"w7hPn4By86"}],"key":"azIese27or"},{"type":"text","value":": 10 minutes","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"NiE1xIbqW9"}],"key":"i9FY78cPQL"}],"key":"SzzmAgFbu5"},{"type":"thematicBreak","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"QqIhOBjbE3"}],"key":"f49dGX6V2F"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport xarray as xr\nimport datetime\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\nimport matplotlib.pylab as pl\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\nimport geocat.viz as gv\nimport geocat.datafiles as gdf\n\nimport tropycal.tracks as tracks\n\nimport warnings\nwarnings.filterwarnings('ignore')","key":"aUJKIdIEHX"},{"type":"output","id":"CPdvEVjDEjsRNWqvOYX60","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/advanced-viz-cookbook/lib/python3.13/site-packages/tropycal/_version.py:11: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  from pkg_resources import get_distribution\n"}],"key":"xuqMglortv"}],"key":"YIT2R0kbEq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spaghetti Hurricane Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XcfPbNNVRX"}],"identifier":"spaghetti-hurricane-plot","label":"Spaghetti Hurricane Plot","html_id":"spaghetti-hurricane-plot","implicit":true,"key":"aECmZz5B7V"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Visualizing the predicted path of an incoming hurricane is both complicated and important. There are many plots that meteorologists are trained to read, but when shared with the public can be confusing or alarming. There are strengths and weaknesses to each hurricane visualization approach. The cone of uncertainty, for example, is often misinterpreted to suggest the hurricane growth in time rather than widening of path possibilities. Spaghetti plots on the other hand, clearly show hurricane paths but show them as equal to each other.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SnnVLuGvB7"}],"key":"gxT9c0Bh7E"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In this example we will plot some forecasted paths from the 2012 North-Atlantic storm Hurricane Sandy. Each forecast is from the Global Ensemble Forecast System (GEFS) provided by the National Centers for Environmental Prediction at NOAA.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KhyGExpDsy"}],"key":"AN4NzeGP5B"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"We’ll use the package ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"hd0dqLhBPE"},{"type":"link","url":"tropycal.github.io/tropycal/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"tropycal","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"JtS5yBTMG6"}],"urlSource":"tropycal.github.io/tropycal/","key":"cIAwK03aGZ"},{"type":"text","value":" to easily access HURDAT2 and IBTrACS reanalysis data and operational National Hurricane Center (NHC) Best Track data. ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"uaujvlEa0k"},{"type":"inlineCode","value":"tropycal","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"za69NDYgCC"},{"type":"text","value":" has a lot of great features for real time hurricane visualization, but since this Cookbook is comparatively static we’re using a past hurricane and only using this package to access the data. Our plotting will be done with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Nz5bAcRtnU"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rMu8ROUCcC"},{"type":"text","value":" and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"B72rnFOD7s"},{"type":"inlineCode","value":"cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bQdyUNB9gy"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"PHdgshBwbR"}],"key":"hzzRa0DLZN"}],"key":"vASXFL2sSr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Read in Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MTfaq4GjLY"}],"identifier":"read-in-data","label":"Read in Data","html_id":"read-in-data","implicit":true,"key":"LBhxxcejXf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First, to grab our hurricane data from tropycal we need to specify a basin:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PM7L70rkt1"}],"key":"AfOnfDA3eD"}],"key":"bPPzyOx3T9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"basin = tracks.TrackDataset(basin='north_atlantic')","key":"qV3b3sMgJp"},{"type":"output","id":"DdutyDeToUl9GhPABeYxm","data":[{"output_type":"stream","name":"stdout","text":"--> Starting to read in HURDAT2 data\n"},{"output_type":"stream","name":"stdout","text":"--> Completed reading in HURDAT2 data (3.61 seconds)\n"}],"key":"n4YFRveQe5"}],"key":"ayXFtOgcfi"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Find your storm by name and year:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JMSq9p7CEi"}],"key":"ONsgrciYvC"}],"key":"H4F9KlIrIf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"storm = basin.get_storm(('sandy',2012))\n\nsandy_ds = storm.to_xarray()\nsandy_ds","key":"gmc1jFHPUc"},{"type":"output","id":"TO84mM73u0HXct1yImfw3","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 5kB\nDimensions:    (time: 45)\nCoordinates:\n  * time       (time) datetime64[ns] 360B 2012-10-21T18:00:00 ... 2012-10-31T...\nData variables:\n    extra_obs  (time) int64 360B 0 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 1 0 0 0 0 0 0 0\n    special    (time) <U1 180B '' '' '' '' '' '' '' '' ... '' '' '' '' '' '' ''\n    type       (time) <U2 360B 'LO' 'LO' 'LO' 'TD' 'TS' ... 'EX' 'EX' 'EX' 'EX'\n    lat        (time) float64 360B 14.3 13.9 13.5 13.1 ... 40.4 40.7 41.1 41.5\n    lon        (time) float64 360B -77.4 -77.8 -78.2 -78.6 ... -79.8 -80.3 -80.7\n    vmax       (time) int64 360B 25 25 25 30 35 40 40 ... 70 55 50 40 35 35 30\n    mslp       (time) int64 360B 1006 1005 1003 1002 1000 ... 986 992 993 995\n    wmo_basin  (time) <U14 3kB 'north_atlantic' ... 'north_atlantic'\nAttributes:\n    id:              AL182012\n    operational_id:  AL182012\n    name:            SANDY\n    year:            2012\n    season:          2012\n    basin:           north_atlantic\n    source_info:     NHC Hurricane Database\n    source:          hurdat\n    ace:             13.6675","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"a20d3073ee0b484050583118afabc5b1","path":"/advanced-viz-cookbook/build/a20d3073ee0b484050583118afabc5b1.html"}}}],"key":"uXQdHF5stO"}],"key":"GXyknvLgaK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"And we can grab any of a number of forecasts:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MOS9NOdq7Z"}],"key":"z7XX2cwGQZ"}],"key":"VpAbfYJMfQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"forecasts = storm.get_operational_forecasts()\nprint(forecasts.keys())","key":"Vx7dvxC7CL"},{"type":"output","id":"DPUuWkK9XEJiaHG7R2BXy","data":[{"output_type":"stream","name":"stdout","text":"dict_keys(['CARQ', 'CMC', 'NAM', 'NGX', 'UKX', 'AC00', 'AEM2', 'AEMN', 'AP01', 'AP02', 'AP03', 'AP04', 'AP05', 'AP06', 'AP07', 'AP08', 'AP09', 'AP10', 'AP12', 'AP13', 'AP14', 'AP15', 'AP16', 'AP17', 'AP18', 'AP20', 'AVN2', 'AVNO', 'BAMD', 'BAMM', 'BAMS', 'CEMN', 'CLIP', 'CLP5', 'CMC2', 'COT2', 'COTC', 'DSHP', 'FIM9', 'FM92', 'G012', 'GFD2', 'GFDE', 'GFDL', 'GFDT', 'GFT2', 'GHM2', 'GP01', 'GPM2', 'GPMN', 'HWE2', 'HWF2', 'HWFE', 'HWRF', 'ICON', 'IV15', 'IVCN', 'IVCR', 'LBAR', 'LGEM', 'NAM2', 'NGX2', 'OFCP', 'OFP2', 'SHF5', 'SHFR', 'SHIP', 'TCLP', 'TV15', 'TVCA', 'TVCC', 'TVCE', 'TVCN', 'UWN2', 'UWN8', 'XTRP', 'ZGFS', 'AEMI', 'AP11', 'AP19', 'AVNI', 'CMCI', 'COTI', 'FM9I', 'GFDI', 'GFTI', 'GHMI', 'GPMI', 'HWFI', 'NAMI', 'NGXI', 'OFPI', 'RI25', 'SPC3', 'UKXI', 'DRCL', 'GFE2', 'MRCL', 'MRFO', 'UKX2', 'UKM', 'AHW4', 'G01I', 'OFCL', 'OCD5', 'BCD5', 'OCS5', 'BCS5', 'OFCI', 'UKMI', 'AHW2', 'EGRR', 'FSSE', 'RI30', 'RI35', 'RYOC', 'UKM2', 'AHWI', 'EGRI', 'TCOA', 'EGR2', 'UWNI', 'HWEI', 'APSU', 'APSI', 'APS2', 'OFC2'])\n"}],"key":"HLYayGFBYx"}],"key":"XvIVUUCi1G"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Each key represents a forecast model, we’ll select the GFS AP01 forecast which has many initializations. These initializations are named by time in YYYYMMDDHH format:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yeMRGeXu3p"}],"key":"l7mxjkjhGj"}],"key":"rHUMmq7aHd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"forecasts_AP01 = forecasts['AP01']\nprint(forecasts_AP01.keys())","key":"N2CPC5OyDB"},{"type":"output","id":"GZUY4RkH6pgXfE3AxqWQ9","data":[{"output_type":"stream","name":"stdout","text":"dict_keys(['2012102112', '2012102118', '2012102200', '2012102206', '2012102212', '2012102218', '2012102300', '2012102306', '2012102312', '2012102318', '2012102400', '2012102406', '2012102412', '2012102418', '2012102500', '2012102506', '2012102512', '2012102518', '2012102600', '2012102606', '2012102612', '2012102618', '2012102700', '2012102706', '2012102712', '2012102718', '2012102800', '2012102806', '2012102812', '2012102818', '2012102900', '2012102906', '2012102912', '2012102918', '2012103000', '2012103006', '2012103012', '2012103018', '2012103100'])\n"}],"key":"HCrXsOE71r"}],"key":"LVPR8F2z6s"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spaghetti Plot of One Esemble Member","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"To6MzTd20C"}],"identifier":"spaghetti-plot-of-one-esemble-member","label":"Spaghetti Plot of One Esemble Member","html_id":"spaghetti-plot-of-one-esemble-member","implicit":true,"key":"DBrmoPVZh7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s set up our Cartopy grid to plot one ensemble member of the hurricane model.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"COATAeGWiR"}],"key":"Up1GiTRXPX"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"These steps might be familiar to you but we:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YI096aqfPS"}],"key":"SPL2GdkZCr"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"create our axes with a Plate Caree projection","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ExstDQxXag"}],"key":"LWMuDnbSRV"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"add land features","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bH9N81IUvq"}],"key":"utjujTguQN"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"add grid lines","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ThRKvF5DOU"}],"key":"jgCnKNgSRa"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"edit our gridline labels to not duplicate on all four sides","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"GVbDoZXDeZ"}],"key":"rEC3gv4KtD"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"edit our gridline label fontsize","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"cdsb8NsCZB"}],"key":"mPCkoeXefp"}],"key":"UA3mCaOolW"}],"key":"GNdGZnpH10"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Projection with land features\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Add Gridlines to right and bottom\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=.25, color='gray', alpha=0.5, linestyle='--')\ngl.xlabels_top = False\ngl.ylabels_left = False\ngl.xlabel_style = {'size': 8,}\ngl.ylabel_style = {'size': 8,}","key":"vlQbmDJFiV"},{"type":"output","id":"Ie8RYxdOt4nMK6fAOjqRL","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ae3cead494577516b2d29d2a406a3596","path":"/advanced-viz-cookbook/build/ae3cead494577516b2d29d2a406a3596.png"}}}],"key":"jaZKrHNVUV"}],"key":"IpcYIjp9gc"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Looking at GFS Ensemble Member Forecast AP01, we can make a spaghetti plot of each of these initializations.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FXEH41Iwb1"}],"key":"NuFm06LFtD"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The crux of the visualization is that we loop through and plot each initialization (in ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sKSZ6KT9Wo"},{"type":"inlineCode","value":"for i in forecasts_AP01","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uD1z1uW9eO"},{"type":"text","value":"), plot the true hurricane path, and add a legend (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"C90zNCt7Do"},{"type":"inlineCode","value":"plt.legend()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PCgQypyQBO"},{"type":"text","value":").","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EF2LCmjbJn"}],"key":"yMGT6hlOyI"}],"key":"wy5eYpyRAh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Projection with land features\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Add Gridlines to right and bottom\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=.25, color='gray', alpha=0.5, linestyle='--')\ngl.xlabels_top = False\ngl.ylabels_left = False\ngl.xlabel_style = {'size': 8,}\ngl.ylabel_style = {'size': 8,}\n\n# Spaghetti Plot of AP01 forecasts\nforecasts_AP01 = forecasts['AP01']\nfor i in forecasts_AP01:\n    # We're naming this line even though it is over-written each loop,\n    # so that we can reference the last line in the legend\n    # (as they all share the same formatting)\n    forecast_path = plt.plot(forecasts_AP01[i]['lon'],\n                            forecasts_AP01[i]['lat'],\n                            color='cornflowerblue',\n                            linewidth=0.5)\n\n# Plot the real storm path in a thicker black line\ntrue_path = plt.plot(sandy_ds.lon,\n    sandy_ds.lat,\n    color='k',\n    linewidth=1) # Make it thicker than the ensemble paths\n\n# Add a legend with only one forecast_path and the true_path\nplt.legend([true_path[0], forecast_path[0]], ['True Path', 'GFS AP01 Forecasts'])\n\nplt.title('Hurricane Sandy (2012)');","key":"wsI8bSUiLl"},{"type":"output","id":"_DoUJJoOcn0u7YlkQLA6m","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"edebc8eb7b307db66c8a258f24fa86ae","path":"/advanced-viz-cookbook/build/edebc8eb7b307db66c8a258f24fa86ae.png"}}}],"key":"ykd6BA29h3"}],"key":"a0CZkiqsqh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This plot is a great example of a spaghetti plot, but is it super useful? Is it confusing? Each line looks like it carries the same weight, when some of these possible paths are from hours before Sandy hit the Northeastern United States and others are from days before.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mJsqCpCTdN"}],"key":"wBa7HNbYMt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Maybe it is better to show the user some indication of how the forecast for this ensemble converged on the true path with later and later initialization times.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aDp0HhJGtN"}],"key":"sknZwZH4j7"}],"key":"YRFMkhW9yg"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spaghetti Plot of One Esemble Member with Temporal Colormapping","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xJwYfjaXLV"}],"identifier":"spaghetti-plot-of-one-esemble-member-with-temporal-colormapping","label":"Spaghetti Plot of One Esemble Member with Temporal Colormapping","html_id":"spaghetti-plot-of-one-esemble-member-with-temporal-colormapping","implicit":true,"key":"fPyG8LLaer"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Some additions to look out for:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eu0PI0SpeY"}],"key":"JbXjDpeWj5"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"we grab the time information from the initialization name using ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"D7VaLQKmev"},{"type":"inlineCode","value":"datetime","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Tz2JM2LVun"}],"key":"u8dQZiBUiL"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"normalize a colormap by the time information with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Rlx4yFEwb3"},{"type":"inlineCode","value":"cmap = mpl.colors.ListedColormap(plt.cm.autumn_r(normalized_times))","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"s3W37q9517"}],"key":"YRJPq8w7ru"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"loop through the colormap as we loop through the time steps within the ensemble member","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"a3zLI9qfyf"}],"key":"aMMAadjeuO"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"add a colorbar  with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"zRyzTnc3MT"},{"type":"inlineCode","value":"plt.colorbar(plt.cm.ScalarMappable(cmap=cmap))","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yWutKr43Wj"},{"type":"text","value":", where ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QvXj9UbGav"},{"type":"inlineCode","value":"ScalarMappable","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"h684A15ewX"},{"type":"text","value":" is used to map scalar data to RGBA.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cJgfVuZcES"}],"key":"DnAKiDC5pz"}],"key":"Emm7Kjica0"}],"key":"GpXLPiU2wh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Projection with land features\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Add Gridlines to right and bottom\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=.25, color='gray', alpha=0.5, linestyle='--')\ngl.xlabels_top = False\ngl.ylabels_left = False\ngl.xlabel_style = {'size': 8,}\ngl.ylabel_style = {'size': 8,}\n\n# Spaghetti Plot of AP01 forecasts\nforecasts_AP01 = forecasts['AP01']\n\n# Get time information from initialization name\nformat = '%Y%m%d%H'\ntimes = [datetime.datetime.strptime(i, format) for i in list(forecasts_AP01.keys())]\nnormalized_times = [(i - times[0]) / (times[-1] - times[0]) for i in times]\n\n# Create a color list for forecast iteration\ncmap = mpl.colors.ListedColormap(plt.cm.autumn_r(normalized_times))\n\nc = 0\nfor i in forecasts_AP01:\n    plt.plot(forecasts_AP01[i]['lon'],\n        forecasts_AP01[i]['lat'],\n        color=cmap(c),\n        linewidth=0.5)\n    c += 1\n\n# Plot the real storm path\ntrue_path = plt.plot(sandy_ds.lon,\n    sandy_ds.lat,\n    color='red', # Selecting a color matching one of the cmap extremes\n    linewidth=1,\n    label='True Path') # The easiest way to add a plot to the legend is with the label kwarg\n\n# Add a legend with only one the true_path\n# Forecasted paths will be shown in a colorbar\nplt.legend()\n\nplt.title('Hurricane Sandy')\n\n# Add colorbar\ncbar = plt.colorbar(plt.cm.ScalarMappable(cmap=cmap), ax=ax, orientation='horizontal', shrink=0.8, pad=0.075)\ncbar.set_label('GFS AP01 Forecasts', labelpad=6)\n\n# Set tick locations and labels for every 4th tick\n# i.e. once a day (a new initialiation every 6 hours)\ntick_indices = range(0, len(times), 4)\ncbar.set_ticks([normalized_times[i] for i in tick_indices])\ncbar.set_ticklabels([times[i].strftime('%d') for i in tick_indices], fontsize=8)\ncbar.ax.text(1.02, 0.5, 'OCT-2012', va='top', ha='left', transform=cbar.ax.transAxes);","key":"MPorAv6mJ5"},{"type":"output","id":"6J9OPQnlyFG--PE8Al_E6","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"573cdf831d61022d49fd659e6851eedd","path":"/advanced-viz-cookbook/build/573cdf831d61022d49fd659e6851eedd.png"}}}],"key":"cgDXtdejAp"}],"key":"cmHodBfUaO"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can see that as the storm progressed, the AP01 GFS Forecast Ensemble Member converges on Sandy’s true path as the storm progresses through October, 2012.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hWXiigmOct"}],"key":"VDjYKn475p"}],"key":"HrdF4cAPbZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Alternatively, we may want to plot the possible hurricane paths from multiple GFS Forecast Ensemble members from the same iteration timestamp as a spaghetti plot.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AqDmiNoYSO"}],"key":"J6h9NQCy1C"}],"key":"gmQT68YBbO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spaghetti Plot of All Esemble Members at One Point in Time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N2Q0AobG1I"}],"identifier":"spaghetti-plot-of-all-esemble-members-at-one-point-in-time","label":"Spaghetti Plot of All Esemble Members at One Point in Time","html_id":"spaghetti-plot-of-all-esemble-members-at-one-point-in-time","implicit":true,"key":"rSFlWprKK0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First, we need to grab all of the relevant forecast keys to GFS models (the ones that are titled ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mJWmckniGm"},{"type":"inlineCode","value":"AP##","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HC6r6EVCTU"},{"type":"text","value":" from 0 to 20):","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RHl8x8YLqo"}],"key":"P4tVCYmweP"}],"key":"Doy8n4rQkB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# List of valid AP## keys from 0 to 20\nGFS_keys = ['AP' + str(i).zfill(2) for i in range(1, 21)]\n\n# Arbitrarily selected midnight on October 27, 2012 to plot all forecasts at\ntime = '2012102700'\n\n# Set up Cartopy Projection with land features\nax = plt.axes(projection=ccrs.PlateCarree())\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Add Gridlines to right and bottom\ngl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,\n                  linewidth=.25, color='gray', alpha=0.5, linestyle='--')\ngl.xlabels_top = False\ngl.ylabels_left = False\ngl.xlabel_style = {'size': 8,}\ngl.ylabel_style = {'size': 8,}\n\n# Spaghetti Plot of forecasts\nfor i in range(20):\n    ap = forecasts[GFS_keys[i]]\n    forecast_path = plt.plot(ap[time]['lon'],\n        ap[time]['lat'],\n        color='cornflowerblue',\n        linewidth=0.5)\n\n# Plot the real storm path in a thicker black line\ntrue_path = plt.plot(sandy_ds.lon, sandy_ds.lat, color='k', linewidth=1)\n\n# Add a legend with only one forecast_path and the true_path\nplt.legend([true_path[0], forecast_path[0]],\n    ['True Path', 'AP01 - AP20'],\n    loc='lower right')\n\nplt.title('Hurricane Sandy - GFS Forecasts from Oct-27-2012');","key":"TIg4pZi4t6"},{"type":"output","id":"wa_a-sDygcFI4xntdGInV","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"92b88fb50b0ae6cf289072e997c03e27","path":"/advanced-viz-cookbook/build/92b88fb50b0ae6cf289072e997c03e27.png"}}}],"key":"RxC7NQ9q6Z"}],"key":"JHsKAi6LG8"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Hurricane Sandy hit the Northeast on October 29, 2012. From this spaghetti plot we can see that by the 27th most ensemble members of the GFS forecast predicted a similar behavior for the storm.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u5jS3ImiHi"}],"key":"ebFuvHNLvJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"There is more analysis that could be done on hurriane trajectories. We have covered some plotting customization that might be useful for your analysis and data visualization.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jzRxHxa0gU"}],"key":"pPlm0DgiF7"}],"key":"xnPaMBavGJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Spaghetti Contour Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hCkh00wOSQ"}],"identifier":"spaghetti-contour-plot","label":"Spaghetti Contour Plot","html_id":"spaghetti-contour-plot","implicit":true,"key":"tVOEL5gTrE"}],"key":"UpgGKnkj4I"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this example we will read in the geopotential height datafile ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Brx2bDIh1Z"},{"type":"inlineCode","value":"HGT500_MON_1958-1997.nc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xGrM6dDUkh"},{"type":"text","value":" from using geocat-datafiles. Then we will look at different timesteps of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yoUKkun68A"},{"type":"inlineCode","value":"HGT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jPS5xWBNwF"},{"type":"text","value":" geopotential height variable at the 5500 gpm level, plotting this contour’s locations through time. This example is adapted from ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FHX2E7o79M"},{"type":"link","url":"https://geocat.ucar.edu/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"GeoCAT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g7nqUZQND9"}],"urlSource":"https://geocat.ucar.edu/","key":"sKyYpNmQJX"},{"type":"text","value":"’s ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EOFr1a0nuG"},{"type":"link","url":"https://geocat-examples.readthedocs.io/en/latest/gallery/Contours/NCL_conOncon_5.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"NCL_conOncon_5","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vCumb5s8v7"}],"urlSource":"https://geocat-examples.readthedocs.io/en/latest/gallery/Contours/NCL_conOncon_5.html","key":"SqW5qGE23T"},{"type":"text","value":" script.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gyu6bzy1eg"}],"key":"b9Fw191CuL"}],"key":"dzLaN1Eaiy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Read in data:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hjDK5w0LhR"}],"identifier":"read-in-data","label":"Read in data:","html_id":"read-in-data-1","implicit":true,"key":"U4cZlI4aV5"}],"key":"TMYNLDTXHq"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"ds = xr.open_dataset(gdf.get(\"netcdf_files/HGT500_MON_1958-1997.nc\"),\n                     decode_times=False)\n\nds","key":"BavGDVovhO"},{"type":"output","id":"ZmIa_AdG8fpzgQ_1MvQdE","data":[{"output_type":"stream","name":"stderr","text":"Downloading file 'netcdf_files/HGT500_MON_1958-1997.nc' from 'https://github.com/NCAR/geocat-datafiles/raw/main/netcdf_files/HGT500_MON_1958-1997.nc' to '/home/runner/.cache/geocat'.\n"},{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 20MB\nDimensions:  (time: 480, lat: 73, lon: 144)\nCoordinates:\n  * time     (time) float64 4kB 0.0 1.0 2.0 3.0 4.0 ... 476.0 477.0 478.0 479.0\n  * lat      (lat) float32 292B -90.0 -87.5 -85.0 -82.5 ... 82.5 85.0 87.5 90.0\n  * lon      (lon) float32 576B 0.0 2.5 5.0 7.5 10.0 ... 350.0 352.5 355.0 357.5\nData variables:\n    yrmon    (time) float64 4kB ...\n    HGT      (time, lat, lon) float32 20MB ...\nAttributes:\n    conventions:    None\n    history:        NCEP/NCAR REANALYSIS MONTHLY MEAN SUBSETS\\nftp://ncardata...\n    source:         NCEP Reanalysis; ds090.2\n    title:          500mb Geopotential Height: 1958-1997\n    source_mss:     /SHEA/HVL/HGT_1958-1997.nc:  500 mb extracted\n    creation_date:  creation date: Tue Aug  7 16:31:48 MDT 2001","content_type":"text/plain"},"text/html":{"content":"<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n<defs>\n<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n</symbol>\n<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n</symbol>\n</defs>\n</svg>\n<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(\n    --jp-content-font-color0,\n    var(--pst-color-text-base rgba(0, 0, 0, 1))\n  );\n  --xr-font-color2: var(\n    --jp-content-font-color2,\n    var(--pst-color-text-base, rgba(0, 0, 0, 0.54))\n  );\n  --xr-font-color3: var(\n    --jp-content-font-color3,\n    var(--pst-color-text-base, rgba(0, 0, 0, 0.38))\n  );\n  --xr-border-color: var(\n    --jp-border-color2,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 10))\n  );\n  --xr-disabled-color: var(\n    --jp-layout-color3,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 40))\n  );\n  --xr-background-color: var(\n    --jp-layout-color0,\n    var(--pst-color-on-background, white)\n  );\n  --xr-background-color-row-even: var(\n    --jp-layout-color1,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 5))\n  );\n  --xr-background-color-row-odd: var(\n    --jp-layout-color2,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 15))\n  );\n}\n\nhtml[theme=\"dark\"],\nhtml[data-theme=\"dark\"],\nbody[data-theme=\"dark\"],\nbody.vscode-dark {\n  --xr-font-color0: var(\n    --jp-content-font-color0,\n    var(--pst-color-text-base, rgba(255, 255, 255, 1))\n  );\n  --xr-font-color2: var(\n    --jp-content-font-color2,\n    var(--pst-color-text-base, rgba(255, 255, 255, 0.54))\n  );\n  --xr-font-color3: var(\n    --jp-content-font-color3,\n    var(--pst-color-text-base, rgba(255, 255, 255, 0.38))\n  );\n  --xr-border-color: var(\n    --jp-border-color2,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 10))\n  );\n  --xr-disabled-color: var(\n    --jp-layout-color3,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 40))\n  );\n  --xr-background-color: var(\n    --jp-layout-color0,\n    var(--pst-color-on-background, #111111)\n  );\n  --xr-background-color-row-even: var(\n    --jp-layout-color1,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 5))\n  );\n  --xr-background-color-row-odd: var(\n    --jp-layout-color2,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 15))\n  );\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: inline-block;\n  opacity: 0;\n  height: 0;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n  border: 2px solid transparent !important;\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:focus + label {\n  border: 2px solid var(--xr-font-color0) !important;\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: \"►\";\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: \"▼\";\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: \"(\";\n}\n\n.xr-dim-list:after {\n  content: \")\";\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: \",\";\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  border-color: var(--xr-background-color-row-odd);\n  margin-bottom: 0;\n  padding-top: 2px;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n  border-color: var(--xr-background-color-row-even);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-index-preview {\n  grid-column: 2 / 5;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  display: none;\n  border-top: 2px dotted var(--xr-background-color);\n  padding-bottom: 20px !important;\n  padding-top: 10px !important;\n}\n\n.xr-var-attrs-in + label,\n.xr-var-data-in + label,\n.xr-index-data-in + label {\n  padding: 0 1px;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data,\n.xr-index-data-in:checked ~ .xr-index-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-data > pre,\n.xr-index-data > pre,\n.xr-var-data > table > tbody > tr {\n  background-color: transparent !important;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-index-name div,\n.xr-index-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt,\n.xr-attrs dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2,\n.xr-no-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n\n.xr-var-attrs-in:checked + label > .xr-icon-file-text2,\n.xr-var-data-in:checked + label > .xr-icon-database,\n.xr-index-data-in:checked + label > .xr-icon-database {\n  color: var(--xr-font-color0);\n  filter: drop-shadow(1px 1px 5px var(--xr-font-color2));\n  stroke-width: 0.8px;\n}\n</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt; Size: 20MB\nDimensions:  (time: 480, lat: 73, lon: 144)\nCoordinates:\n  * time     (time) float64 4kB 0.0 1.0 2.0 3.0 4.0 ... 476.0 477.0 478.0 479.0\n  * lat      (lat) float32 292B -90.0 -87.5 -85.0 -82.5 ... 82.5 85.0 87.5 90.0\n  * lon      (lon) float32 576B 0.0 2.5 5.0 7.5 10.0 ... 350.0 352.5 355.0 357.5\nData variables:\n    yrmon    (time) float64 4kB ...\n    HGT      (time, lat, lon) float32 20MB ...\nAttributes:\n    conventions:    None\n    history:        NCEP/NCAR REANALYSIS MONTHLY MEAN SUBSETS\\nftp://ncardata...\n    source:         NCEP Reanalysis; ds090.2\n    title:          500mb Geopotential Height: 1958-1997\n    source_mss:     /SHEA/HVL/HGT_1958-1997.nc:  500 mb extracted\n    creation_date:  creation date: Tue Aug  7 16:31:48 MDT 2001</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-e73c13ea-0e43-4bd6-83d4-17063887062b' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-e73c13ea-0e43-4bd6-83d4-17063887062b' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 480</li><li><span class='xr-has-index'>lat</span>: 73</li><li><span class='xr-has-index'>lon</span>: 144</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-bb47b522-655a-4f72-9847-33b795c078a0' class='xr-section-summary-in' type='checkbox'  checked><label for='section-bb47b522-655a-4f72-9847-33b795c078a0' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 1.0 2.0 ... 477.0 478.0 479.0</div><input id='attrs-3b3177c4-9c13-4303-893d-42f724b150c0' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-3b3177c4-9c13-4303-893d-42f724b150c0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2f10ad00-2986-4e55-bd67-03f05a9d50e4' class='xr-var-data-in' type='checkbox'><label for='data-2f10ad00-2986-4e55-bd67-03f05a9d50e4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>elapsed time</dd><dt><span>units :</span></dt><dd>months since 1958-1-1 00:00:00</dd></dl></div><div class='xr-var-data'><pre>array([  0.,   1.,   2., ..., 477., 478., 479.], shape=(480,))</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lat</span></div><div class='xr-var-dims'>(lat)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-90.0 -87.5 -85.0 ... 87.5 90.0</div><input id='attrs-31770150-d512-47c1-ab52-8babb18ed6a3' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-31770150-d512-47c1-ab52-8babb18ed6a3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5b412998-8146-4a11-8586-e72d3e7cea25' class='xr-var-data-in' type='checkbox'><label for='data-5b412998-8146-4a11-8586-e72d3e7cea25' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>short_name :</span></dt><dd>lat</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>units :</span></dt><dd>degrees_north</dd></dl></div><div class='xr-var-data'><pre>array([-90. , -87.5, -85. , -82.5, -80. , -77.5, -75. , -72.5, -70. , -67.5,\n       -65. , -62.5, -60. , -57.5, -55. , -52.5, -50. , -47.5, -45. , -42.5,\n       -40. , -37.5, -35. , -32.5, -30. , -27.5, -25. , -22.5, -20. , -17.5,\n       -15. , -12.5, -10. ,  -7.5,  -5. ,  -2.5,   0. ,   2.5,   5. ,   7.5,\n        10. ,  12.5,  15. ,  17.5,  20. ,  22.5,  25. ,  27.5,  30. ,  32.5,\n        35. ,  37.5,  40. ,  42.5,  45. ,  47.5,  50. ,  52.5,  55. ,  57.5,\n        60. ,  62.5,  65. ,  67.5,  70. ,  72.5,  75. ,  77.5,  80. ,  82.5,\n        85. ,  87.5,  90. ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>lon</span></div><div class='xr-var-dims'>(lon)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.0 2.5 5.0 ... 352.5 355.0 357.5</div><input id='attrs-4e8c64ab-b744-407a-8553-315778c701e9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-4e8c64ab-b744-407a-8553-315778c701e9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1d31042d-495b-4c3f-a5f5-d3f0a73440f0' class='xr-var-data-in' type='checkbox'><label for='data-1d31042d-495b-4c3f-a5f5-d3f0a73440f0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>short_name :</span></dt><dd>lon</dd><dt><span>long_name :</span></dt><dd>longitude</dd><dt><span>units :</span></dt><dd>degrees_east</dd></dl></div><div class='xr-var-data'><pre>array([  0. ,   2.5,   5. ,   7.5,  10. ,  12.5,  15. ,  17.5,  20. ,  22.5,\n        25. ,  27.5,  30. ,  32.5,  35. ,  37.5,  40. ,  42.5,  45. ,  47.5,\n        50. ,  52.5,  55. ,  57.5,  60. ,  62.5,  65. ,  67.5,  70. ,  72.5,\n        75. ,  77.5,  80. ,  82.5,  85. ,  87.5,  90. ,  92.5,  95. ,  97.5,\n       100. , 102.5, 105. , 107.5, 110. , 112.5, 115. , 117.5, 120. , 122.5,\n       125. , 127.5, 130. , 132.5, 135. , 137.5, 140. , 142.5, 145. , 147.5,\n       150. , 152.5, 155. , 157.5, 160. , 162.5, 165. , 167.5, 170. , 172.5,\n       175. , 177.5, 180. , 182.5, 185. , 187.5, 190. , 192.5, 195. , 197.5,\n       200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. , 332.5, 335. , 337.5, 340. , 342.5, 345. , 347.5,\n       350. , 352.5, 355. , 357.5], dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ab9c468e-5b06-45d1-b085-c84cb0cbcbcf' class='xr-section-summary-in' type='checkbox'  checked><label for='section-ab9c468e-5b06-45d1-b085-c84cb0cbcbcf' class='xr-section-summary' >Data variables: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>yrmon</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-dd19d725-b9bc-45ee-9a99-714f2ccea946' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-dd19d725-b9bc-45ee-9a99-714f2ccea946' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9e55e547-e630-40f2-94d9-91f7168ea9ac' class='xr-var-data-in' type='checkbox'><label for='data-9e55e547-e630-40f2-94d9-91f7168ea9ac' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>short_name :</span></dt><dd>YYYYMM</dd><dt><span>long_name :</span></dt><dd>Year-Month</dd><dt><span>units :</span></dt><dd>current date as 6 digit integer (YYYYMM)</dd></dl></div><div class='xr-var-data'><pre>[480 values with dtype=float64]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>HGT</span></div><div class='xr-var-dims'>(time, lat, lon)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-c738da54-942c-4abe-869b-0581709c7b45' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c738da54-942c-4abe-869b-0581709c7b45' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5869c9a4-3fad-4f6b-ad18-346fcea3c1a9' class='xr-var-data-in' type='checkbox'><label for='data-5869c9a4-3fad-4f6b-ad18-346fcea3c1a9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>lev :</span></dt><dd>500.0</dd><dt><span>short_name :</span></dt><dd>HGT</dd><dt><span>long_name :</span></dt><dd>Geopotential Height</dd><dt><span>units :</span></dt><dd>gpm</dd></dl></div><div class='xr-var-data'><pre>[5045760 values with dtype=float32]</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-2e1eca74-7c18-4b14-9a9c-57ee5a98ec86' class='xr-section-summary-in' type='checkbox'  ><label for='section-2e1eca74-7c18-4b14-9a9c-57ee5a98ec86' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-7fa000a6-2a35-4425-b3c6-124cdde0d3d7' class='xr-index-data-in' type='checkbox'/><label for='index-7fa000a6-2a35-4425-b3c6-124cdde0d3d7' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([  0.0,   1.0,   2.0,   3.0,   4.0,   5.0,   6.0,   7.0,   8.0,   9.0,\n       ...\n       470.0, 471.0, 472.0, 473.0, 474.0, 475.0, 476.0, 477.0, 478.0, 479.0],\n      dtype=&#x27;float64&#x27;, name=&#x27;time&#x27;, length=480))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>lat</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-9852dd67-d40f-455b-8656-dee23cb31cdb' class='xr-index-data-in' type='checkbox'/><label for='index-9852dd67-d40f-455b-8656-dee23cb31cdb' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([-90.0, -87.5, -85.0, -82.5, -80.0, -77.5, -75.0, -72.5, -70.0, -67.5,\n       -65.0, -62.5, -60.0, -57.5, -55.0, -52.5, -50.0, -47.5, -45.0, -42.5,\n       -40.0, -37.5, -35.0, -32.5, -30.0, -27.5, -25.0, -22.5, -20.0, -17.5,\n       -15.0, -12.5, -10.0,  -7.5,  -5.0,  -2.5,   0.0,   2.5,   5.0,   7.5,\n        10.0,  12.5,  15.0,  17.5,  20.0,  22.5,  25.0,  27.5,  30.0,  32.5,\n        35.0,  37.5,  40.0,  42.5,  45.0,  47.5,  50.0,  52.5,  55.0,  57.5,\n        60.0,  62.5,  65.0,  67.5,  70.0,  72.5,  75.0,  77.5,  80.0,  82.5,\n        85.0,  87.5,  90.0],\n      dtype=&#x27;float32&#x27;, name=&#x27;lat&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>lon</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-adaa0743-a5bb-4e5b-a1cf-4b773796f5da' class='xr-index-data-in' type='checkbox'/><label for='index-adaa0743-a5bb-4e5b-a1cf-4b773796f5da' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([  0.0,   2.5,   5.0,   7.5,  10.0,  12.5,  15.0,  17.5,  20.0,  22.5,\n       ...\n       335.0, 337.5, 340.0, 342.5, 345.0, 347.5, 350.0, 352.5, 355.0, 357.5],\n      dtype=&#x27;float32&#x27;, name=&#x27;lon&#x27;, length=144))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-005aa82a-b36c-418e-87a5-6c20ec2bf507' class='xr-section-summary-in' type='checkbox'  checked><label for='section-005aa82a-b36c-418e-87a5-6c20ec2bf507' class='xr-section-summary' >Attributes: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>conventions :</span></dt><dd>None</dd><dt><span>history :</span></dt><dd>NCEP/NCAR REANALYSIS MONTHLY MEAN SUBSETS\nftp://ncardata.ucar.edu/pub/reanalysis/monthly/presa/\n</dd><dt><span>source :</span></dt><dd>NCEP Reanalysis; ds090.2</dd><dt><span>title :</span></dt><dd>500mb Geopotential Height: 1958-1997</dd><dt><span>source_mss :</span></dt><dd>/SHEA/HVL/HGT_1958-1997.nc:  500 mb extracted</dd><dt><span>creation_date :</span></dt><dd>creation date: Tue Aug  7 16:31:48 MDT 2001</dd></dl></div></li></ul></div></div>","content_type":"text/html"}}}],"key":"lN4rQQMdHk"}],"key":"Lqms3LpQSO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Initial Spaghetti Plot on North Polar Stereographic Projection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CjYZmVIXTH"}],"identifier":"initial-spaghetti-plot-on-north-polar-stereographic-projection","label":"Initial Spaghetti Plot on North Polar Stereographic Projection","html_id":"initial-spaghetti-plot-on-north-polar-stereographic-projection","implicit":true,"key":"uTZeYMZB1K"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Again, first let’s set up our Cartopy axes. This time setting our projection to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wME9QTiZSM"},{"type":"inlineCode","value":"NorthPolarStereo","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IAxA5cJALu"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VkDRbZYZ3A"}],"key":"DFpPzkvY1I"}],"key":"nRabzDGFWG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Map Projection\nfig = plt.figure(figsize=(8, 8))\nax = plt.axes(projection=ccrs.NorthPolarStereo())\n\ngv.set_map_boundary(ax, [-180, 180], [0, 40], south_pad=1)\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Set draw_labels to False so that we can manually manipulate it\ngl = ax.gridlines(ccrs.PlateCarree(),\n                  draw_labels=False,\n                  linestyle=\"--\",\n                  linewidth=1,\n                  color='darkgray',\n                  zorder=2)","key":"XTyK9d4TzU"},{"type":"output","id":"fF7C_lZa_MAAhwOpvsRDn","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e6fd41fefe75a059848abc3f332efe26","path":"/advanced-viz-cookbook/build/e6fd41fefe75a059848abc3f332efe26.png"}}}],"key":"U4v3X1oA6n"}],"key":"MPZNgi6Cp0"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Then let’s add our data to this plot.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"A1QiagecUU"}],"key":"GVaxaK67mI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will iterate through every 12th timestep","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SOku21PK2b"}],"key":"cnW9gxrhSO"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"handling any artifacts of the global wrapping at 0 or 360 degrees with ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nIv1rCX6nP"},{"type":"inlineCode","value":"gv.xr_add_cyclic_longitudes(p, \"lon\")","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"HHFeDv0daC"}],"key":"DgUgOJjBDD"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"and calling a contour plot on a single level.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tL91wPugRH"}],"key":"ngtirqnfnb"}],"key":"vfqEj8sVAO"}],"key":"noRYH1WIHi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Map Projection\nfig = plt.figure(figsize=(8, 8))\nax = plt.axes(projection=ccrs.NorthPolarStereo())\n\ngv.set_map_boundary(ax, [-180, 180], [0, 40], south_pad=1)\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Set draw_labels to False so that we can manually manipulate it\ngl = ax.gridlines(ccrs.PlateCarree(),\n                  draw_labels=False,\n                  linestyle=\"--\",\n                  linewidth=1,\n                  color='darkgray',\n                  zorder=2)\n\n# Iterate through the 19 timesteps, plotting the data\nn = 19\nfor x in range(n):\n\n    # Get a slice of data at the 12*x timestep\n    p = ds.HGT.isel(time=12*x)\n\n    # Use geocat-viz utility function to handle the no-shown-data artifact\n    # of 0 and 360-degree longitudes\n    slon = gv.xr_add_cyclic_longitudes(p, \"lon\")\n\n    # Plot contour data at pressure level 5500 for the 12*x timestep\n    p = slon.plot.contour(ax=ax,\n                          transform=ccrs.PlateCarree(),\n                          linewidths=0.5,\n                          levels=[5500],\n                          colors='blue',\n                          add_labels=False)","key":"j0F5b6Vzzd"},{"type":"output","id":"Tu2wZq3-pa9uDiYel7EVl","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"9df74c1f77b08ca7c1cc32466db11d13","path":"/advanced-viz-cookbook/build/9df74c1f77b08ca7c1cc32466db11d13.png"}}}],"key":"szHhEPl5AI"}],"key":"A1NrhGkBll"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Adding Directional Labels to Polar Stereographic Projection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KSh7JKPCfa"}],"identifier":"adding-directional-labels-to-polar-stereographic-projection","label":"Adding Directional Labels to Polar Stereographic Projection","html_id":"adding-directional-labels-to-polar-stereographic-projection","implicit":true,"key":"ZfJg94QCZB"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Adding labels to a map projection that aren’t lat/lon coordinates is less than intuitive. In this example we manually add labels and select their locations so that you can see NESW labels.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jFBq6w7Kp5"}],"key":"pYj8OsSHWO"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For this we use ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MHNk5n9sm4"},{"type":"inlineCode","value":"mticker.FixedLocator()","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hoTbOqCfxq"},{"type":"text","value":" to manipulare gridline spacing, manipulate East and West tick labels separately, and specify tick locations with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ULj6hHyI6o"},{"type":"inlineCode","value":"ax.text(transform=ccrs.Geodetic())","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"t7YaNltbkL"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OjHlxAZu7D"}],"key":"Vde80m1d3A"}],"key":"X5JI9dSOXN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate a figure\nfig = plt.figure(figsize=(8, 8))\n\n# Create an axis with a polar stereographic projection\nax = plt.axes(projection=ccrs.NorthPolarStereo())\n\n# Add land feature to map\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Set map boundary to include latitudes between 0 and 40 and longitudes\n# between -180 and 180 only\ngv.set_map_boundary(ax, [-180, 180], [0, 40], south_pad=1)\n\n# Set draw_labels to False so that you can manually manipulate it later\ngl = ax.gridlines(ccrs.PlateCarree(),\n                  draw_labels=False,\n                  linestyle=\"--\",\n                  linewidth=1,\n                  color='darkgray',\n                  zorder=2)\n\n# Manipulate latitude and longitude gridline numbers and spacing\ngl.ylocator = mticker.FixedLocator(np.arange(0, 90, 15))\ngl.xlocator = mticker.FixedLocator(np.arange(-180, 180, 30))\n\n# Manipulate longitude labels (0, 30 E, 60 E, ..., 30 W, etc.)\nticks = np.arange(0, 210, 30)\netick = ['0'] + [\n    r'%dE' % tick for tick in ticks if (tick != 0) & (tick != 180)\n] + ['180']\nwtick = [r'%dW' % tick for tick in ticks if (tick != 0) & (tick != 180)]\nlabels = etick + wtick\nxticks = np.arange(0, 360, 30)\nyticks = np.full_like(xticks, -5)  # Latitude where the labels will be drawn\nfor xtick, ytick, label in zip(xticks, yticks, labels):\n    if label == '180':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='top',\n                transform=ccrs.Geodetic())\n    elif label == '0':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='bottom',\n                transform=ccrs.Geodetic())\n    else:\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='center',\n                transform=ccrs.Geodetic())\n\n# Iterate through 18 different timesteps\nfor x in range(19):\n\n    # Get a slice of data at the 12*x+1 timestep\n    p = ds.HGT.isel(time=12 * x + 1)\n\n    # Use geocat-viz utility function to handle the no-shown-data artifact\n    # of 0 and 360-degree longitudes\n    slon = gv.xr_add_cyclic_longitudes(p, \"lon\")\n\n    # Plot contour data at pressure level 5500 for the 12*x+1 timestep\n    p = slon.plot.contour(ax=ax,\n                          transform=ccrs.PlateCarree(),\n                          linewidths=0.5,\n                          levels=[5500],\n                          colors='blue',\n                          add_labels=False)\n\n# Use geocat.viz.util convenience function to add titles\ngv.set_titles_and_labels(ax,\n                         maintitle=r\"$\\bf{Spaghetti}$\" + \" \" + r\"$\\bf{Plot}$\",\n                         lefttitle=slon.long_name,\n                         righttitle='5500 '+slon.units)\n\n# Make tight layout\nplt.tight_layout()","key":"ZkaBXc5ZsJ"},{"type":"output","id":"pua96vBcg7eNJwqo9GkXy","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"30f250a585b3249f8029d50ec6426f55","path":"/advanced-viz-cookbook/build/30f250a585b3249f8029d50ec6426f55.png"}}}],"key":"hCnYuqyj0v"}],"key":"CicjFL5Q6H"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now in this example, there isn’t necessarily a temporal progression of geopotential height, but to be sure let’s add a colormap component to each of our loops.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O6VIf6l3Oa"}],"key":"AuTGnPtlkL"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This is also useful because for your data visualization application there might be, and the commands are slightly different for a contour plot as for a line plot in the above example.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TIXhrvjSBP"}],"key":"jKaeWhLpxD"}],"key":"nGVUkmkXhl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Contour Spaghetti Plot Temporal Colorbar Manipulation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eXAhPDnxBO"}],"identifier":"contour-spaghetti-plot-temporal-colorbar-manipulation","label":"Contour Spaghetti Plot Temporal Colorbar Manipulation","html_id":"contour-spaghetti-plot-temporal-colorbar-manipulation","implicit":true,"key":"GyHnDzMWML"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s update add a discrete colorbar that has yearly ticklabels. One challenge addressed in this example is setting the ticklabels to be in the center of each discrete color box.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NaY5zeLmA0"}],"key":"cqY6pixJEv"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"New code lines here are:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pdIopYBCSx"}],"key":"oafs3fMdxK"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"creating a discrete colormap with ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"k5eoT72x18"},{"type":"inlineCode","value":"plt.get_cmap('winter_r', n)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"GrQRrW0bZO"},{"type":"text","value":" and color bounds with ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"xmawQswHAG"},{"type":"inlineCode","value":"np.linspace()","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"HSKswsGECG"}],"key":"VekEqw2c5X"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"specifying the color in each contour call with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"spQu7u6rx3"},{"type":"inlineCode","value":"colors=[cmap(bounds)[x]]","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"sLxLjFGxp7"}],"key":"YskfFvMP1R"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"adjusting the time unit for the colorbar ticks","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"bVTyx44nYa"}],"key":"YJCCBabRDt"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"adding a colorbar for the normalized colormap, calling the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"AWdGSVlYUR"},{"type":"inlineCode","value":"orientation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cwGiZgU1Vm"},{"type":"text","value":", ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"JoKyG0M9wK"},{"type":"inlineCode","value":"shrink","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Ikpc9Whmip"},{"type":"text","value":", and ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"XuLIhIoLqN"},{"type":"inlineCode","value":"pad","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"dMiCPpNm4J"},{"type":"text","value":" keyword arguments to make it display well","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"pzQPhiGJDo"}],"key":"YUDiQ12stz"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"setting colorbar tick location to be at color midpoints with ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"jc2nhFsKYy"},{"type":"inlineCode","value":"cbar.set_ticks()","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ZzOPIPftkE"},{"type":"text","value":", yet forcing their labels to be years (not year midpoints) with ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"CBbDsd3ar8"},{"type":"inlineCode","value":"cbar.set_ticklabels()","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"hi38xc8k3M"}],"key":"DnIUUFy2vL"}],"key":"pLK05HXdYy"}],"key":"XOzSNmu7zf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Cartopy Map Projection\nfig = plt.figure(figsize=(8, 8))\nax = plt.axes(projection=ccrs.NorthPolarStereo())\n\ngv.set_map_boundary(ax, [-180, 180], [0, 40], south_pad=1)\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Set draw_labels to False so that we can manually manipulate it\ngl = ax.gridlines(ccrs.PlateCarree(),\n                  draw_labels=False,\n                  linestyle=\"--\",\n                  linewidth=1,\n                  color='darkgray',\n                  zorder=2)\n\n# Manipulate latitude and longitude gridline numbers and spacing\ngl.ylocator = mticker.FixedLocator(np.arange(0, 90, 15))\ngl.xlocator = mticker.FixedLocator(np.arange(-180, 180, 30))\n\n# Manipulate longitude labels (0, 30 E, 60 E, ..., 30 W, etc.)\nticks = np.arange(0, 210, 30)\netick = ['0'] + [\n    r'%dE' % tick for tick in ticks if (tick != 0) & (tick != 180)\n] + ['180']\nwtick = [r'%dW' % tick for tick in ticks if (tick != 0) & (tick != 180)]\nlabels = etick + wtick\nxticks = np.arange(0, 360, 30)\nyticks = np.full_like(xticks, -5)  # Latitude where the labels will be drawn\nfor xtick, ytick, label in zip(xticks, yticks, labels):\n    if label == '180':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='top',\n                transform=ccrs.Geodetic())\n    elif label == '0':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='bottom',\n                transform=ccrs.Geodetic())\n    else:\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='center',\n                transform=ccrs.Geodetic())\n\n# Create a color list for each of the 19 contours\nn = 19\ncmap = plt.get_cmap('winter_r', n) # the `, n` makes the colormap display discretized\nbounds = np.linspace(0, 1, n)\n\n# Iterate through the timesteps\nfor x in range(n):\n\n    # Get a slice of data at the 12*x timestep\n    p = ds.HGT.isel(time=12*x)\n\n    # Handle wrapping artifacts\n    slon = gv.xr_add_cyclic_longitudes(p, \"lon\")\n\n    # Plot contour data at pressure level 5500 for the 12*x timestep\n    p = slon.plot.contour(ax=ax,\n                          transform=ccrs.PlateCarree(),\n                          linewidths=0.5,\n                          levels=[5500],\n                          colors=[cmap(bounds)[x]], # set colors to use our new cmap\n                          add_labels=False)\n\n# Add a colorbar\n# The default time unit is in months since 1958, years is more intuitive\nyear_0 = 1958\nyear_n = (ds.time.isel(time=12*n) / 12).astype(int) + year_0\n\nnorm = plt.Normalize(vmin=year_0, vmax=year_n)\ncbar = plt.colorbar(plt.cm.ScalarMappable(cmap=cmap, norm=norm),\n    ax=ax,\n    orientation='vertical',\n    shrink=0.8, # Shrink to the approximate size of the map\n    pad = 0.1) # Pad so colorbar doesn't overlap with directional label\n\ncbar.set_ticks(np.arange(year_0+0.5, year_n)) # Set tick locations to be at color midpoints\ncbar.set_ticklabels(np.arange(year_0, year_n)) # Set tick labels to be years (despite their location value being year + 0.5)\ncbar.set_label('Time (years)')\n\n# Use geocat.viz.util convenience function to add titles\ngv.set_titles_and_labels(ax,\n                         maintitle=r\"$\\bf{Spaghetti}$\" + \" \" + r\"$\\bf{Plot}$\",\n                         lefttitle=slon.long_name,\n                         righttitle='5500 '+slon.units)\n\n# Make tight layout\nplt.tight_layout();","key":"dQru78Jibc"},{"type":"output","id":"wzgDURm-MB0RoBOnU9jv_","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x800 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"9e64b2e4e06f1470e21598cc196ac67c","path":"/advanced-viz-cookbook/build/9e64b2e4e06f1470e21598cc196ac67c.png"}}}],"key":"eARz28CGOU"}],"key":"ZP3R42co3b"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Contour Spaghetti Plot with Hand-Picked Colors","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zj1IsNm3D5"}],"identifier":"contour-spaghetti-plot-with-hand-picked-colors","label":"Contour Spaghetti Plot with Hand-Picked Colors","html_id":"contour-spaghetti-plot-with-hand-picked-colors","implicit":true,"key":"VJO4qqgZtO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If you want your plot to be visually appealing it might be worth selecting different colors for each contour plot in the for-loop, however these do not have to be sequentially ordered or time-aware. It is actually simplest to hand-pick colors for each loop. In this iteration of the plot we hand pick colors in a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fXTWsWXQVC"},{"type":"inlineCode","value":"colorlist","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oP3VknA52J"},{"type":"text","value":" and plot the first time step on its own to demonstrate plotting one loop unlike the others.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NF9HqG2Oik"}],"key":"kd3MBmzKFW"}],"key":"eXIQ0kTx63"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate a figure\nfig = plt.figure(figsize=(8, 8))\n\n# Create an axis with a polar stereographic projection\nax = plt.axes(projection=ccrs.NorthPolarStereo())\n\n# Add land feature to map\nax.add_feature(cfeature.LAND, facecolor='lightgray')\n\n# Set map boundary to include latitudes between 0 and 40 and longitudes\n# between -180 and 180 only\ngv.set_map_boundary(ax, [-180, 180], [0, 40], south_pad=1)\n\n# Set draw_labels to False so that you can manually manipulate it later\ngl = ax.gridlines(ccrs.PlateCarree(),\n                  draw_labels=False,\n                  linestyle=\"--\",\n                  linewidth=1,\n                  color='darkgray',\n                  zorder=2)\n\n# Manipulate latitude and longitude gridline numbers and spacing\ngl.ylocator = mticker.FixedLocator(np.arange(0, 90, 15))\ngl.xlocator = mticker.FixedLocator(np.arange(-180, 180, 30))\n\n# Manipulate longitude labels (0, 30 E, 60 E, ..., 30 W, etc.)\nticks = np.arange(0, 210, 30)\netick = ['0'] + [\n    r'%dE' % tick for tick in ticks if (tick != 0) & (tick != 180)\n] + ['180']\nwtick = [r'%dW' % tick for tick in ticks if (tick != 0) & (tick != 180)]\nlabels = etick + wtick\nxticks = np.arange(0, 360, 30)\nyticks = np.full_like(xticks, -5)  # Latitude where the labels will be drawn\nfor xtick, ytick, label in zip(xticks, yticks, labels):\n    if label == '180':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='top',\n                transform=ccrs.Geodetic())\n    elif label == '0':\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='bottom',\n                transform=ccrs.Geodetic())\n    else:\n        ax.text(xtick,\n                ytick,\n                label,\n                fontsize=12,\n                horizontalalignment='center',\n                verticalalignment='center',\n                transform=ccrs.Geodetic())\n\n# Get slice of data at the 0th timestep - plot this contour line separately\n# because it will be thicker than the other contour lines\np = ds.HGT.isel(time=0)\n\n# Use geocat-viz utility function to handle the no-shown-data\n# artifact of 0 and 360-degree longitudes\nslon = gv.xr_add_cyclic_longitudes(p, \"lon\")\n\n# Plot contour data at pressure level 5500 at the first timestep\np = slon.plot.contour(ax=ax,\n                      transform=ccrs.PlateCarree(),\n                      linewidths=1.5,\n                      levels=[5500],\n                      colors='black',\n                      add_labels=False)\n\n# Create a color list for each of the next 18 contours\ncolorlist = [\n    \"crimson\", \"green\", \"blue\", \"yellow\", \"cyan\", \"hotpink\", \"crimson\",\n    \"skyblue\", \"navy\", \"lightyellow\", \"mediumorchid\", \"orange\", \"slateblue\",\n    \"palegreen\", \"magenta\", \"springgreen\", \"pink\", \"forestgreen\", \"violet\"\n]\n\n# Iterate through 18 different timesteps\nfor x in range(18):\n\n    # Get a slice of data at the 12*x+1 timestep\n    p = ds.HGT.isel(time=12 * x + 1)\n\n    # Use geocat-viz utility function to handle the no-shown-data artifact\n    # of 0 and 360-degree longitudes\n    slon = gv.xr_add_cyclic_longitudes(p, \"lon\")\n\n    # Plot contour data at pressure level 5500 for the 12*x+1 timestep\n    p = slon.plot.contour(ax=ax,\n                          transform=ccrs.PlateCarree(),\n                          linewidths=0.5,\n                          levels=[5500],\n                          colors=colorlist[x],\n                          add_labels=False)\n\n# Use geocat.viz.util convenience function to add titles\ngv.set_titles_and_labels(ax,\n                         maintitle=r\"$\\bf{Spaghetti}$\" + \" \" + r\"$\\bf{Plot}$\",\n                         lefttitle=slon.long_name,\n                         righttitle='5500 '+slon.units)\n\n# Make tight layout\nplt.tight_layout()","key":"km9ygm7HPN"},{"type":"output","id":"AVIhUvPpeFL3Fm1d5EJjP","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 800x800 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"90b11ab3bcae7ded9e425510f645675c","path":"/advanced-viz-cookbook/build/90b11ab3bcae7ded9e425510f645675c.png"}}}],"key":"lI6ihN00SO"}],"key":"DFUP01ya8Q"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gcX5ZxaUGQ"}],"key":"eMxGmm7XVq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jm0HPKHITX"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"fwSNt3Vthe"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Spaghetti plots are many lines drawn on the same figure. They have pros and cons. They are visually stunning but can be confusing, so it is important to make sure your data visualization conveys accurate information either by manipulating color or linewidth. Since the manipulation of spaghetti plots have their own considerations, this chapter shows several design choices that you can use to jumpstart your visualization needs.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TVn79EfhSK"}],"key":"iuSFxWtvyy"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"lPg7EBkuev"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"KkdA5ZSDuu"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Next up let’s discuss ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"wlfWw8Rxqy"},{"type":"link","url":"/notebooks/animation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Animation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"pYzWLDCBlf"}],"urlSource":"7-animation","dataUrl":"/notebooks.animation.json","internal":true,"protocol":"file","key":"UKOwAsvPX1"},{"type":"text","value":".","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"usHpZOy2Aa"}],"key":"vHKfCwqCKa"}],"key":"nDubbelJGz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"phSRaRfNxr"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"VPI3oMLmNP"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://tropycal.github.io/tropycal/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Tropycal documentation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fJUSmYA5AJ"}],"urlSource":"https://tropycal.github.io/tropycal/","key":"ie48k7LG6P"}],"key":"ScpxojYY4m"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://geocat-examples.readthedocs.io/en/latest/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"GeoCat-examples visualization gallery","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"OaBus2cjd2"}],"urlSource":"https://geocat-examples.readthedocs.io/en/latest/","key":"bIuifU3kln"}],"key":"QveUjlXZI0"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://geocat-viz.readthedocs.io/en/latest/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"GeoCAT-viz documentation","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pfQp3wFNSv"}],"urlSource":"https://geocat-viz.readthedocs.io/en/latest/","key":"OhcKs880RI"}],"key":"bTmTitDF1a"}],"key":"BIecpL7PHH"}],"key":"NAcBEUBBu5"}],"key":"QA4JfCpRKg"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Skew T Diagrams","url":"/notebooks/skewt","group":"Specialty Plots"},"next":{"title":"Animation","url":"/notebooks/animation","group":"Animation"}}},"domain":"http://localhost:3000"}